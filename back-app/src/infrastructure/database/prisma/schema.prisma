// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_DATABASE_URL")
}

model User {
    id         String   @id @default(uuid())
    email      String   @unique
    password   String
    roles      Role[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

enum Role {
    ADMIN
    FLEET_MANAGER
}

model Motorcycle {
    licensePlate          String                  @unique
    brand                 String
    model                 String
    year                  Int
    price                 Float
    maintenanceInterval   String
    DriverSheet           DriverSheet?            @relation(fields: [driverId], references: [id])
    driverId              String?
    MotorcycleTry         MotorcycleTry[]
    MotorcycleIncident    MotorcycleIncident[]
    MotorcycleMaintenance MotorcycleMaintenance[]
    createDate            DateTime                @default(now())
}

model MotorcycleTry {
    id           String      @id
    motorcycle   Motorcycle  @relation(fields: [motorcycleId], references: [licensePlate])
    motorcycleId String
    driverSheet  DriverSheet @relation(fields: [driverId], references: [id])
    driverId     String
    startDate    DateTime
    endDate      DateTime
}

model MotorcycleIncident {
    id           String      @id
    type         String
    description  String
    motorcycle   Motorcycle  @relation(fields: [motorcycleId], references: [licensePlate])
    motorcycleId String
    driverSheet  DriverSheet @relation(fields: [driverId], references: [id])
    driverId     String
    date         DateTime
    time         String
    location     String
}

model DriverSheet {
    id                    String                  @unique
    fullName              String
    age                   Int
    email                 String                  @unique
    motorcycleLicenseType String
    drivingExperience     String
    motorcycles           Motorcycle[]
    motorcycleTries       MotorcycleTry[]
    motorcycleIncidents   MotorcycleIncident[]
    MotorcycleMaintenance MotorcycleMaintenance[]
}

model MotorcycleMaintenance {
    id                       String                 @id
    driverSheet              DriverSheet            @relation(fields: [driverId], references: [id])
    driverId                 String
    motorcycle               Motorcycle             @relation(fields: [motorcycleId], references: [licensePlate])
    motorcycleId             String
    technicalRecommendations String
    usedSpareParts           MaintenanceSparePart[]
    totalSparePartsPrice     Float
    totalMaintenancePrice    Float
    laborPrice               Float
    status                   MaintenanceStatus
    date                     DateTime
}

model SparePart {
    id                   String                 @id
    name                 String
    brand                String
    refNumber            String                 @unique
    price                Float
    stock                Int
    MaintenanceSparePart MaintenanceSparePart[]
    createDate           DateTime               @default(now())
}

model MaintenanceSparePart {
    id            String                @id
    sparePart     SparePart             @relation(fields: [sparePartId], references: [id])
    sparePartId   String
    quantity      Int
    maintenance   MotorcycleMaintenance @relation(fields: [maintenanceId], references: [id])
    maintenanceId String

    @@unique([sparePartId, maintenanceId])
}

enum MaintenanceStatus {
    IN_PROGRESS
    CLOSED
}

model Events {
    id         String   @id @default(uuid())
    identifier String
    type       String
    data       Json
    version    Int
    created_at DateTime @default(now())
}
